# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PPGGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# мои ошибки:
#               дирректории не должні біть русскими

# from class_ref_conv import Reference_Convert
from PyQt6.QtCore import QSize, Qt
from PyQt6.QtWidgets import QApplication, QMainWindow, QWidget, QPushButton
from PyQt6.QtWidgets import QDialog
from PyQt6 import uic
from PyQt6.QtGui import QIcon
from PyQt6.QtCore import QIODevice
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtSerialPort import QSerialPort, QSerialPortInfo
from PyQt6.QtWidgets import QDialog, QApplication, QWidget, QFormLayout, QSpinBox, QMainWindow
from PyQt6.QtWidgets import (QVBoxLayout, QGridLayout, QTabWidget, QLabel, QPushButton, QFileDialog, QTextEdit,
                             QComboBox, QCheckBox,
                             QListWidget, QFrame, QTableView, QTableWidgetItem, QTableWidget, QHeaderView, QProgressBar)

import matplotlib.pyplot as plt
import numpy as np
import sys
import serial
import math as m
from time import perf_counter

list_signals = ['A0', 'A1', 'A2', 'A3', 'A4', 'A5', 'ADS1015']
list_signals_flag = [True, True, True, True, True, True, False]
"""
        self.progressBar.setMinimum(0)
        self.progressBar.setMaximum(self.spinBox.value())
"""


class Ui_MainWindow(QMainWindow):
#class Ui_MainWindow(QDialog):
   # def setupUi(self):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Reference_Convert   ver. 0.0.1.0")
        self.setWindowIcon(QIcon("icon.png"))
        self.setGeometry(100, 100, 600, 600)  # координаты начала и размеры
        MainWindow=QMainWindow()

       # self.MainWindow.setObjectName("MainWindow")
       # self.MainWindow.resize(394, 340)


        # QBoxLayout - Класс QBoxLayout выстраивает дочерние виджеты горизонтально или вертикально. QHBoxLayout and QVBoxLayout
        # Класс QFormLayout управляет формами виджетов ввода и связанными с ними метками.
        # Класс QGridLayout размещает виджеты в сетке.
        # Класс QStackedLayout предоставляет стек виджетов, в котором одновременно виден только один виджет.
        # ---------  https://doc.qt.io/qt-6/qlayout.html
        #

        # --------- TabWidget_general
        tabwidget = QTabWidget(MainWindow); self.setCentralWidget(tabwidget)
        vboxLayout = QVBoxLayout(tabwidget)
        #self.centralwidget.setObjectName("centralwidget")
        Tab_1 = MainTab()
        #  Tab_2 = SettingTab()
        #  Tab_3 = EventsTab()

        i1 = tabwidget.addTab(Tab_1, "Main")
        # i2 = tabwidget.addTab(Tab_2, "Setting")
        # i3 = tabwidget.addTab(Tab_3, "Events")

        self.TabWidget_general = tabwidget
        vboxLayout.addWidget(self.TabWidget_general)
        #
        # self.retranslateUi(MainWindow)
        # QtCore.QMetaObject.connectSlotsByName(MainWindow)
        #
        # self.add_functions()


class MainTab(QWidget):

    def __init__(self):
        super().__init__()  # super --- добавление к родительскому классу новых свойств и методов
        self.setObjectName("MainTab")

        layout = QFormLayout(self)

        grid_layout = QGridLayout(self)  # Create QGridLayout
        grid_layout.setSpacing(5)  # расстояние между виджетами

        # ---------- frame_OpenPort
        frame_OpenPort = QFrame()
        frame_OpenPort.setGeometry(1, 1, 346, 55)
        frame_OpenPort.setStyleSheet('background-color: rgb(230,230,230)')
        ##frame_OpenPort.setFrameShape(QFrame.StyledPanel)
        self.frame_OpenPort = frame_OpenPort
        layout.addWidget(self.frame_OpenPort)

        grid_layout = QGridLayout(self.frame_OpenPort)  # Create QGridLayout
        grid_layout.setSpacing(3)  # расстояние между виджетами

        label_Port = QLabel(self.frame_OpenPort)
        label_Port.setGeometry(5, 10, 31, 16)
        label_Port.setText('Port:')
        self.label_Port = label_Port
        grid_layout.addWidget(self.label_Port, 1, 1, 1, 1)

        comboBox_ComPort = QComboBox(self.frame_OpenPort)
        comboBox_ComPort.setGeometry(5, 10, 31, 16)
        self.comboBox_ComPort = comboBox_ComPort
        grid_layout.addWidget(self.comboBox_ComPort, 1, 2)

        pushButton_Open_Port = QPushButton(self.frame_OpenPort)
        pushButton_Open_Port.setGeometry(5, 10, 31, 16)
        pushButton_Open_Port.setText('Open')
        self.pushButton_Open_Port = pushButton_Open_Port
        grid_layout.addWidget(self.pushButton_Open_Port, 1, 3)

        pushButton_Close_Port = QPushButton(self.frame_OpenPort)
        pushButton_Close_Port.setGeometry(41, 10, 40, 19)
        pushButton_Close_Port.setText('Close')
        self.pushButton_Close_Port = pushButton_Close_Port
        grid_layout.addWidget(self.pushButton_Close_Port, 1, 4)
        #
        self.setLayout(grid_layout)

        # --------------- frame_Signal
        layout_Vertical = QVBoxLayout()

        frame_Signal = QFrame()
        frame_Signal.setGeometry(2, 80, 241, 481)
        frame_Signal.setStyleSheet('background-color: rgb(230,230,230)')
        ##frame_OpenPort.setFrameShape(QFrame.StyledPanel)
        self.frame_Signal = frame_Signal
        layout.addWidget(self.frame_Signal)

        label_Show_Signals = QLabel(self.frame_Signal)
        label_Show_Signals.setGeometry(5, 10, 40, 16)
        label_Show_Signals.setText('Show signals')
        self.label_Show_Signals = label_Show_Signals
        layout_Vertical.addWidget(self.label_Show_Signals)

        table_Show_Signals = self.Create_tabl_Show_Signals(self.frame_Signal)
        # table_Show_Signals = Create_tabl_Show_Signals(self.frame_Signal)
        self.table_Show_Signals = table_Show_Signals
        layout_Vertical.addWidget(self.table_Show_Signals)
        grid_layout.addLayout(layout_Vertical, 2, 1, 1, 5)

    #
    # @property
    def Create_tabl_Show_Signals(self, obj):
        table_Show_Signals = QTableWidget(obj)  # Create a table  obj - родительский объект
        table_Show_Signals.setColumnCount(5)  # Set three columns
        table_Show_Signals.setRowCount(1)  # and one row
        table_Show_Signals.setHorizontalHeaderLabels(["Name", "Shw", "Num.Fig", "k", "W"])  # Set the table headers
        # "Name" - имя сигнала - str
        # "Sh" - показать - 1, спрятать - 0
        # "Num.Fig" - номер фигуры (рисунка)
        # "k" - масштабный коэффициент - сигнал умножается на данное значение
        # "W" - в отдельном окне - 1; во внутреннем окне - 0 QMdiArea
        # for i in range(table_Show_Signals.rowCount()):
        #    table_Show_Signals.setRowHeight(i, 5)

        table_Show_Signals.setColumnWidth(0, 1)  # "Name"
        table_Show_Signals.setColumnWidth(1, 15)  # "Name"
        table_Show_Signals.setColumnWidth(2, 5)  # "Sh", \
        table_Show_Signals.setColumnWidth(3, 5)  # "Num.Fig",
        table_Show_Signals.setColumnWidth(4, 8)  # "k", \
        table_Show_Signals.setColumnWidth(5, 4)  # "W"
        table_Show_Signals.setColumnWidth(6, 4)  # "W"

        c=0
        for i in range(len(list_signals)):
            a=list_signals_flag[i]
            if a == True:
                if c!=0 :
                    table_Show_Signals.insertRow(c)
                table_Show_Signals.setRowHeight(c, 5)
                st=list_signals[i]
                table_Show_Signals.setItem(c, 0, QTableWidgetItem(st))
                check_box = self.create_checkbox()
                table_Show_Signals.setCellWidget(c, 1, check_box)
                table_Show_Signals.setItem(c, 2, QTableWidgetItem(str(c)))
                table_Show_Signals.setItem(c, 3, QTableWidgetItem(str(1)))
                check_box2 = self.create_checkbox()
                table_Show_Signals.setCellWidget(c, 4, check_box2)
                c += 1

        # self.table_Show_Signals=table_Show_Signals
        return table_Show_Signals

    def create_checkbox(self):
        Widget = QtWidgets.QWidget()
        pCheckBox = QtWidgets.QCheckBox()
        pLayout = QtWidgets.QHBoxLayout(Widget)
        pLayout.addWidget(pCheckBox)
        pLayout.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter) # for PyQt5 :  QtCore.Qt.AlignCenter
        pLayout.setContentsMargins(0, 0, 0, 0)
        Widget.setLayout(pLayout)
        return Widget

class SettingTab(QWidget):

    def __init__(self):
        super().__init__()  # super --- добавление к родительскому классу новых свойств и методов
        self.setObjectName("SettingTab")


class EventsTab(QWidget):

    def __init__(self):
        super().__init__()  # super --- добавление к родительскому классу новых свойств и методов
        self.setObjectName("EventsTab")

    # def retranslateUi(self, MainWindow):
    #     _translate = QtCore.QCoreApplication.translate
    #     MainWindow.setWindowTitle(_translate("MainWindow", "PPGGUI"))
    #     self.A1CH.setText(_translate("MainWindow", "A1"))
    #     self.A0CH.setText(_translate("MainWindow", "A0"))
    #     self.A3CH.setText(_translate("MainWindow", "A3"))
    #     self.A2CH.setText(_translate("MainWindow", "A2"))
    #     self.A4CH.setText(_translate("MainWindow", "A4"))
    #     self.A5CH.setText(_translate("MainWindow", "A5"))
    #     self.statusL.setText(_translate("MainWindow", "Status:"))
    #     self.openB.setText(_translate("MainWindow", "Open"))
    #     self.closeB.setText(_translate("MainWindow", "Close"))
    #     self.nameL.setText(_translate("MainWindow", "Name:"))
    #     self.numL.setText(_translate("MainWindow", "Number:"))
    #     self.portL.setText(_translate("MainWindow", "Ports"))
    #     self.spinBox.setSuffix(_translate("MainWindow", " sec"))
    #     self.startB.setText(_translate("MainWindow", "Start"))
    #     self.stopB.setText(_translate("MainWindow", "Stop"))
    #
    # def add_functions (self):
    #     self.openB.clicked.connect(self.onOpen)
    #     self.closeB.clicked.connect(self.onClose)
    #     self.openB.clicked.connect(self.statusopen)
    #     self.closeB.clicked.connect(self.statusclose)
    #     self.startB.clicked.connect(self.start)
    #     self.stopB.clicked.connect(self.stop)
    #
    # def onOpen(self):
    #     serial.setPortName(ui.comL.currentText())
    #     serial.open(QIODevice.ReadWrite)
    #     #time.sleep(0.1)
    #
    # def onClose(self):
    #     serial.close()
    #
    # """
    #     listx=[]
    #     listy=[]
    #     for x in range(100): listx.append(0)
    #     for y in range (100): listy.append(0)
    # """
    #
    # def stop(self):
    #     self.pause = True
    #
    # def start(self):
    #     self.pause=False
    #     i=0
    #     x0 = []; y0 = []; x1 = []; y1 = []; x2 = []; y2 = []
    #     x3 = []; y3 = []; x4 = []; y4 = []; x5 = []; y5 = []
    #     k = [0, 1, 2, 3, 4, 5]
    #     plt.close('all')
    #     plt.figure()
    #     plt.ion()
    #     plt.show()
    #
    #     timestart=perf_counter()
    #
    #     f = open('signal.txt', 'a')
    #     f.write(str(self.nameL.text())  + str(self.nameE.text()) +'    '+str(self.numL.text())    +str(self.numE.text())  + '\n')
    #
    #     while True:
    #         rx = serial.readLine()
    #         rxs=float (rx[0:3])
    #         #rxs = str(rx, 'utf-8').strip()
    #         timeend = perf_counter()
    #         tim = timeend - timestart
    #         times = round(tim, 3)
    #         #self.textBrowser.append(str(i) + '   ' + str(rxs) + '    ' + str(times))
    #         print(str(i), rxs, times)
    #         f.write(str(i) + '   ' + str(rxs) + '   ' + str(times) + '\n')
    #
    #         if times>=self.spinBox.value():
    #             break
    #
    #         if self.pause==True:
    #             break
    #
    #         if (i == k[0] and self.A0CH.isChecked() == True):
    #             x0.append(times)
    #             y0.append(rxs)
    #             self.textBrowser.append(str(i) + '   ' + str(rxs) + '    ' + str(times))
    #             k[0] += 6
    #
    #         elif (i == k[1] and self.A1CH.isChecked() == True):
    #             x1.append(times)
    #             y1.append(rxs)
    #             self.textBrowser.append(str(i) + '   ' + str(rxs) + '    ' + str(times))
    #             k[1] += 6
    #
    #         elif (i == k[2] and self.A2CH.isChecked() == True):
    #             x2.append(times)
    #             y2.append(rxs)
    #             self.textBrowser.append(str(i) + '   ' + str(rxs) + '    ' + str(times))
    #             k[2] += 6
    #
    #         elif (i == k[3] and self.A3CH.isChecked() == True):
    #             x3.append(times)
    #             y3.append(rxs)
    #             self.textBrowser.append(str(i) + '   ' + str(rxs) + '    ' + str(times))
    #             k[3] += 6
    #
    #         elif (i == k[4] and self.A4CH.isChecked() == True):
    #             x4.append(times)
    #             y4.append(rxs)
    #             self.textBrowser.append(str(i) + '   ' + str(rxs) + '    ' + str(times))
    #             k[4] += 6
    #
    #         elif (i == k[5] and self.A5CH.isChecked() == True):
    #             x5.append(times)
    #             y5.append(rxs)
    #             self.textBrowser.append(str(i) + '   ' + str(rxs) + '    ' + str(times))
    #             k[5] += 6
    #
    #         plt.cla()
    #         plt.xlabel('Час')
    #         plt.ylabel('Сигнал')
    #         plt.title('АЦП')
    #         plt.plot(x0, y0, label='A0')
    #         plt.plot(x1, y1, label='A1')
    #         plt.plot(x2, y2, label='A2')
    #         plt.plot(x3, y3, label='A3')
    #         plt.plot(x4, y4, label='A4')
    #         plt.plot(x5, y5, label='A5')
    #         plt.legend(loc='upper right')
    #         plt.savefig('plot.png')
    #         plt.pause(0.01)
    #         """
    #         listx = listx[1:]
    #         listx.append(int(x0))
    #         listy = listy[1:]
    #         listy.append(int(y0))
    #         """
    #         self.progressBar.setValue(i)
    #         i += 1
    #         #time.sleep(0.1)
    #     self.textBrowser.append("Тестування завершено успішно!")
    #     f.close()
    #
    # def statusopen(self):
    #     self.statusL.setText("Status: OPEN")
    #
    # def statusclose(self):
    #     self.statusL.setText("Status: CLOSE")


if __name__ == "__main__":
    # from pympler import muppy
    #
    # all_objects = muppy.get_objects()  # this causes pydev debugger exit with code -1073741819 (0xC0000005)

    app = QApplication(sys.argv)
    #MainWindow = QMainWindow
    ui = Ui_MainWindow()
    #ui.setupUi(MainWindow)
    ui.show()

    # app = QtWidgets.QApplication(sys.argv)
    # MainWindow = QtWidgets.QMainWindow()
    #
    # ui.setupUi(MainWindow)
    #
    # # f = open('signal.txt', 'w')
    # # serial = QSerialPort()
    # # serial.setBaudRate(115200)
    # # portList = []
    # # ports = QSerialPortInfo().availablePorts()
    # #
    # # for port in ports:
    # #     portList.append(port.portName())
    # #     ui.comL.addItems(portList)
    #
    # MainWindow.show()
    sys.exit(app.exec())
