# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Model_GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.




#--------------------------------------------
   # про QT https://magadangorod.ru/common/upload/1/editor/file/PyQtCreatingwindowsappstoPython3Prohorenok.pdf
#
#from class_signals import Base_struct, Signals_general



from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtSerialPort import QSerialPort, QSerialPortInfo
from PyQt5.QtWidgets import QComboBox, QTableWidgetItem, QCheckBox, QWidget
from PyQt5.QtWidgets import QTableWidget # https://russianblogs.com/article/7960879040/
                                        # пример фильтра событий https://digitrain.ru/questions/47960494/
from PyQt5.QtCore import pyqtSignal
import logging  # для отладки и сообщений  об ошибках  https://khashtamov.com/ru/python-logging/
from PyQt5.QtCore import QIODevice
import matplotlib.pyplot as plt
import numpy as np
import sys
import serial
import yaml  # https://pyneng.readthedocs.io/ru/latest/book/17_serialization/yaml.html
             # https://tonais.ru/library/biblioteka-yaml-v-python


#from class_signals import Signals_general, Signal_one

# при изменении имен необходимо редактировать yaml, а также прошерстить код в гуи фале
list_signals = {'A0': True, 'A1': True, 'A2': True, 'A3': True, 'A4': True, 'A5': True, 'ADC1015': True}
#list_signals_flag = [, , , , , , False]

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1125, 867)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")


        self.tabWidget_General = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget_General.setGeometry(QtCore.QRect(0, 0, 1101, 781))
        self.tabWidget_General.setObjectName("tabWidget_General")

        self.tab_Main = QtWidgets.QWidget()
        self.tab_Main.setObjectName("tab_Main")

        self.frame_OpenPort = QtWidgets.QFrame(self.tab_Main)
        self.frame_OpenPort.setGeometry(QtCore.QRect(0, 10, 341, 41))
        self.frame_OpenPort.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_OpenPort.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_OpenPort.setObjectName("frame_OpenPort")

        self.comboBox_ComPort = CustomComboBox(self.frame_OpenPort) #ComboBox_ports(self.frame_OpenPort) #QtWidgets.QComboBox

                                                                    # https://russianblogs.com/article/54731700043/
        self.comboBox_ComPort.setGeometry(QtCore.QRect(40, 10, 101, 22))
        self.comboBox_ComPort.setObjectName("comboBox_ComPort")
        #self.clicked_comboBox_ComPort()

        self.label_Port = QtWidgets.QLabel(self.frame_OpenPort)
        self.label_Port.setGeometry(QtCore.QRect(10, 10, 31, 16))
        self.label_Port.setObjectName("label_Port")

        self.pushButton_Open_Port = QtWidgets.QPushButton(self.frame_OpenPort)
        self.pushButton_Open_Port.setGeometry(QtCore.QRect(160, 10, 75, 23))
        self.pushButton_Open_Port.setObjectName("pushButton_Open_Port")

        self.pushButton_Close_port = QtWidgets.QPushButton(self.frame_OpenPort)
        self.pushButton_Close_port.setGeometry(QtCore.QRect(250, 10, 75, 23))
        self.pushButton_Close_port.setObjectName("pushButton_Close_port")

        self.frame_Signal = QtWidgets.QFrame(self.tab_Main)
        self.frame_Signal.setGeometry(QtCore.QRect(0, 80, 231, 481))
        self.frame_Signal.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_Signal.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_Signal.setObjectName("frame_Signal")

        self.label_Show_Signals = QtWidgets.QLabel(self.frame_Signal)
        self.label_Show_Signals.setGeometry(QtCore.QRect(10, 10, 131, 16))
        self.label_Show_Signals.setObjectName("label_Show_Signals")
       
        #self.table_Show_Signals = QtWidgets.QTableWidget(self.frame_Signal)
        self.table_Show_Signals = Class_Tabl_Show_Signals() #self.Create_tabl_Show_Signals(self.frame_Signal)
        self.table_Show_Signals=self.table_Show_Signals.Create_tabl_Show_Signals(self.frame_Signal)
        self.table_Show_Signals.setGeometry(QtCore.QRect(10, 30, 211, 241))
        self.table_Show_Signals.setObjectName("table_Show_Signals")
        self.table_Show_Signals.cellChanged.connect(self.table_Show_Signals_cellChanged)


        self.groupBox_Time_meas = QtWidgets.QGroupBox(self.frame_Signal)
        self.groupBox_Time_meas.setGeometry(QtCore.QRect(10, 280, 181, 141))
        self.groupBox_Time_meas.setObjectName("groupBox_Time_meas")

        self.radioButton_Contitue_time = QtWidgets.QRadioButton(self.groupBox_Time_meas)
        self.radioButton_Contitue_time.setGeometry(QtCore.QRect(30, 20, 82, 17))
        self.radioButton_Contitue_time.setObjectName("radioButton_Contitue_time")

        self.radioButton_Limit_Time = QtWidgets.QRadioButton(self.groupBox_Time_meas)
        self.radioButton_Limit_Time.setGeometry(QtCore.QRect(30, 40, 91, 17))
        self.radioButton_Limit_Time.setObjectName("radioButton_Limit_Time")

        self.frame_Time_Limit_Meas = QtWidgets.QFrame(self.groupBox_Time_meas)
        self.frame_Time_Limit_Meas.setGeometry(QtCore.QRect(10, 70, 161, 61))
        self.frame_Time_Limit_Meas.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_Time_Limit_Meas.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_Time_Limit_Meas.setObjectName("frame_Time_Limit_Meas")

        self.comboBox_Unit_Time = QtWidgets.QComboBox(self.frame_Time_Limit_Meas)
        self.comboBox_Unit_Time.setGeometry(QtCore.QRect(0, 10, 69, 22))
        self.comboBox_Unit_Time.setObjectName("comboBox_Unit_Time")

        self.lineEdit_Time_Measure = QtWidgets.QLineEdit(self.frame_Time_Limit_Meas)
        self.lineEdit_Time_Measure.setGeometry(QtCore.QRect(80, 10, 61, 20))
        self.lineEdit_Time_Measure.setObjectName("lineEdit_Time_Measure")

        self.progressBar_Time_Measure = QtWidgets.QProgressBar(self.frame_Time_Limit_Meas)
        self.progressBar_Time_Measure.setGeometry(QtCore.QRect(4, 37, 151, 23))
        self.progressBar_Time_Measure.setProperty("value", 24)
        self.progressBar_Time_Measure.setObjectName("progressBar_Time_Measure")

        self.pushButton_Start_Meas = QtWidgets.QPushButton(self.frame_Signal)
        self.pushButton_Start_Meas.setGeometry(QtCore.QRect(10, 430, 75, 23))
        self.pushButton_Start_Meas.setObjectName("pushButton_Start_Meas")
        self.pushButton_Stop_Meas = QtWidgets.QPushButton(self.frame_Signal)
        self.pushButton_Stop_Meas.setGeometry(QtCore.QRect(100, 430, 75, 23))
        self.pushButton_Stop_Meas.setObjectName("pushButton_Stop_Meas")

        self.mdiArea = QtWidgets.QMdiArea(self.tab_Main)
        self.mdiArea.setGeometry(QtCore.QRect(233, 50, 851, 601))
        self.mdiArea.setObjectName("mdiArea")

        self.frame_Save_Data = QtWidgets.QFrame(self.tab_Main)
        self.frame_Save_Data.setGeometry(QtCore.QRect(0, 660, 671, 91))
        self.frame_Save_Data.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_Save_Data.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_Save_Data.setObjectName("frame_Save_Data")

        self.label_Record_to_File = QtWidgets.QLabel(self.frame_Save_Data)
        self.label_Record_to_File.setGeometry(QtCore.QRect(10, 10, 81, 16))
        self.label_Record_to_File.setObjectName("label_Record_to_File")

        self.pushButton_Select_Dir_to_Save = QtWidgets.QPushButton(self.frame_Save_Data)
        self.pushButton_Select_Dir_to_Save.setGeometry(QtCore.QRect(90, 10, 75, 23))
        self.pushButton_Select_Dir_to_Save.setObjectName("pushButton_Select_Dir_to_Save")

        self.lineEdit_Path_to_Save = QtWidgets.QLineEdit(self.frame_Save_Data)
        self.lineEdit_Path_to_Save.setGeometry(QtCore.QRect(180, 10, 481, 20))
        self.lineEdit_Path_to_Save.setObjectName("lineEdit_Path_to_Save")

        self.lineEdit_Name_to_Save = QtWidgets.QLineEdit(self.frame_Save_Data)
        self.lineEdit_Name_to_Save.setGeometry(QtCore.QRect(140, 40, 471, 20))
        self.lineEdit_Name_to_Save.setObjectName("lineEdit_Name_to_Save")

        self.label_Name_File_Save = QtWidgets.QLabel(self.frame_Save_Data)
        self.label_Name_File_Save.setGeometry(QtCore.QRect(110, 40, 21, 16))
        self.label_Name_File_Save.setObjectName("label_Name_File_Save")

        self.comboBox_Type_File_Save = QtWidgets.QComboBox(self.frame_Save_Data)
        self.comboBox_Type_File_Save.setGeometry(QtCore.QRect(10, 40, 69, 22))
        self.comboBox_Type_File_Save.setObjectName("comboBox_Type_File_Save")

        self.checkBox_Write_Save_Data = QtWidgets.QCheckBox(self.frame_Save_Data)
        self.checkBox_Write_Save_Data.setGeometry(QtCore.QRect(10, 70, 70, 17))
        self.checkBox_Write_Save_Data.setObjectName("checkBox_Write_Save_Data")

        self.tabWidget_General.addTab(self.tab_Main, "")
        #  -----------------------------------
        # ---------------------------------

        # ---------- tab_Setting
        self.tab_Setting = QtWidgets.QWidget()
        self.tab_Setting.setObjectName("tab_Setting")

        self.groupBox_Type_Controller = QtWidgets.QGroupBox(self.tab_Setting)
        self.groupBox_Type_Controller.setGeometry(QtCore.QRect(10, 20, 171, 51))
        self.groupBox_Type_Controller.setObjectName("groupBox_Type_Controller")

        self.comboBox_Type_Controller = QtWidgets.QComboBox(self.groupBox_Type_Controller)
        self.comboBox_Type_Controller.setGeometry(QtCore.QRect(10, 20, 151, 22))
        self.comboBox_Type_Controller.setObjectName("comboBox_Type_Controller")

        self.groupBox_Setting_ADC = QtWidgets.QGroupBox(self.tab_Setting)
        self.groupBox_Setting_ADC.setGeometry(QtCore.QRect(40, 80, 111, 241))
        self.groupBox_Setting_ADC.setObjectName("groupBox_Setting_ADC")

        self.pushButton_Send_Setting_ADC = QtWidgets.QPushButton(self.groupBox_Setting_ADC)
        self.pushButton_Send_Setting_ADC.setGeometry(QtCore.QRect(10, 210, 75, 23))
        self.pushButton_Send_Setting_ADC.setObjectName("pushButton_Send_Setting_ADC")

        self.checkBox_A0 = QtWidgets.QCheckBox(self.groupBox_Setting_ADC)
        self.checkBox_A0.setGeometry(QtCore.QRect(10, 20, 70, 17))
        self.checkBox_A0.setObjectName("checkBox_A0")

        self.checkBox_A1 = QtWidgets.QCheckBox(self.groupBox_Setting_ADC)
        self.checkBox_A1.setGeometry(QtCore.QRect(10, 46, 70, 17))
        self.checkBox_A1.setObjectName("checkBox_A1")

        self.checkBox_A2 = QtWidgets.QCheckBox(self.groupBox_Setting_ADC)
        self.checkBox_A2.setGeometry(QtCore.QRect(10, 70, 70, 17))
        self.checkBox_A2.setObjectName("checkBox_A2")

        self.checkBox_A3 = QtWidgets.QCheckBox(self.groupBox_Setting_ADC)
        self.checkBox_A3.setGeometry(QtCore.QRect(10, 95, 70, 17))
        self.checkBox_A3.setObjectName("checkBox_A3")

        self.checkBox_A4 = QtWidgets.QCheckBox(self.groupBox_Setting_ADC)
        self.checkBox_A4.setGeometry(QtCore.QRect(10, 120, 70, 17))
        self.checkBox_A4.setObjectName("checkBox_A4")

        self.checkBox_A5 = QtWidgets.QCheckBox(self.groupBox_Setting_ADC)
        self.checkBox_A5.setGeometry(QtCore.QRect(10, 150, 70, 17))
        self.checkBox_A5.setObjectName("checkBox_A5")

        self.checkBox_ADC1015 = QtWidgets.QCheckBox(self.groupBox_Setting_ADC)
        self.checkBox_ADC1015.setGeometry(QtCore.QRect(10, 180, 70, 17))
        self.checkBox_ADC1015.setObjectName("checkBox_ADC1015")

        self.groupBox_Link_with_PC = QtWidgets.QGroupBox(self.tab_Setting)
        self.groupBox_Link_with_PC.setGeometry(QtCore.QRect(200, 10, 201, 141))
        self.groupBox_Link_with_PC.setObjectName("groupBox_Link_with_PC")

        self.lineEdit_Speed = QtWidgets.QLineEdit(self.groupBox_Link_with_PC)
        self.lineEdit_Speed.setGeometry(QtCore.QRect(70, 100, 113, 20))
        self.lineEdit_Speed.setObjectName("lineEdit_Speed")

        self.radioButton_Link_with_PC_USB = QtWidgets.QRadioButton(self.groupBox_Link_with_PC)
        self.radioButton_Link_with_PC_USB.setGeometry(QtCore.QRect(10, 30, 82, 17))
        self.radioButton_Link_with_PC_USB.setObjectName("radioButton_Link_with_PC_USB")

        self.radioButton_Link_with_PC_WiFi = QtWidgets.QRadioButton(self.groupBox_Link_with_PC)
        self.radioButton_Link_with_PC_WiFi.setGeometry(QtCore.QRect(10, 70, 82, 17))
        self.radioButton_Link_with_PC_WiFi.setObjectName("radioButton_Link_with_PC_WiFi")

        self.label_Link_with_PC_Speed = QtWidgets.QLabel(self.groupBox_Link_with_PC)
        self.label_Link_with_PC_Speed.setGeometry(QtCore.QRect(10, 100, 47, 13))
        self.label_Link_with_PC_Speed.setObjectName("label_Link_with_PC_Speed")

        self.radioButton_Link_with_PC_Bluetooth = QtWidgets.QRadioButton(self.groupBox_Link_with_PC)
        self.radioButton_Link_with_PC_Bluetooth.setGeometry(QtCore.QRect(10, 50, 82, 17))
        self.radioButton_Link_with_PC_Bluetooth.setObjectName("radioButton_Link_with_PC_Bluetooth")

        self.groupBox_Data_Setting_Meas = QtWidgets.QGroupBox(self.tab_Setting)
        self.groupBox_Data_Setting_Meas.setGeometry(QtCore.QRect(410, 10, 191, 141))
        self.groupBox_Data_Setting_Meas.setObjectName("groupBox_Data_Setting_Meas")

        self.checkBox_Data_Setting_Meas_smoth = QtWidgets.QCheckBox(self.groupBox_Data_Setting_Meas)
        self.checkBox_Data_Setting_Meas_smoth.setGeometry(QtCore.QRect(10, 90, 151, 17))
        self.checkBox_Data_Setting_Meas_smoth.setObjectName("checkBox_Data_Setting_Meas_smoth")

        self.lineEdit_Data_Setting_Meas_Freq = QtWidgets.QLineEdit(self.groupBox_Data_Setting_Meas)
        self.lineEdit_Data_Setting_Meas_Freq.setGeometry(QtCore.QRect(82, 50, 81, 20))
        self.lineEdit_Data_Setting_Meas_Freq.setObjectName("lineEdit_Data_Setting_Meas_Freq")

        self.label_Data_Setting_Meas = QtWidgets.QLabel(self.groupBox_Data_Setting_Meas)
        self.label_Data_Setting_Meas.setGeometry(QtCore.QRect(10, 30, 151, 16))
        self.label_Data_Setting_Meas.setObjectName("label_Data_Setting_Meas")

        self.groupBox_SafeMode = QtWidgets.QGroupBox(self.tab_Setting)
        self.groupBox_SafeMode.setGeometry(QtCore.QRect(210, 160, 161, 211))
        self.groupBox_SafeMode.setObjectName("groupBox_SafeMode")

        self.pushButton_Send_SefeMode = QtWidgets.QPushButton(self.groupBox_SafeMode)
        self.pushButton_Send_SefeMode.setGeometry(QtCore.QRect(70, 160, 75, 23))
        self.pushButton_Send_SefeMode.setObjectName("pushButton_Send_SefeMode")

        self.radioButton_2 = QtWidgets.QRadioButton(self.groupBox_SafeMode)
        self.radioButton_2.setGeometry(QtCore.QRect(10, 60, 82, 17))
        self.radioButton_2.setObjectName("radioButton_2")

        self.radioButton_4 = QtWidgets.QRadioButton(self.groupBox_SafeMode)
        self.radioButton_4.setGeometry(QtCore.QRect(10, 120, 82, 17))
        self.radioButton_4.setObjectName("radioButton_4")

        self.radioButton = QtWidgets.QRadioButton(self.groupBox_SafeMode)
        self.radioButton.setGeometry(QtCore.QRect(10, 30, 82, 17))
        self.radioButton.setObjectName("radioButton")

        self.radioButton_3 = QtWidgets.QRadioButton(self.groupBox_SafeMode)
        self.radioButton_3.setGeometry(QtCore.QRect(10, 90, 82, 17))
        self.radioButton_3.setObjectName("radioButton_3")

        self.frame = QtWidgets.QFrame(self.tab_Setting)
        self.frame.setGeometry(QtCore.QRect(10, 630, 341, 111))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        self.pushButton_Send_Setting_Controller_AllParams = QtWidgets.QPushButton(self.frame)
        self.pushButton_Send_Setting_Controller_AllParams.setGeometry(QtCore.QRect(30, 20, 91, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_Send_Setting_Controller_AllParams.sizePolicy().hasHeightForWidth())
        self.pushButton_Send_Setting_Controller_AllParams.setSizePolicy(sizePolicy)
        self.pushButton_Send_Setting_Controller_AllParams.setObjectName("pushButton_Send_Setting_Controller_AllParams")
        self.pushButton_Send_Setting_Controller_AllParams_2 = QtWidgets.QPushButton(self.frame)
        self.pushButton_Send_Setting_Controller_AllParams_2.setGeometry(QtCore.QRect(10, 70, 121, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_Send_Setting_Controller_AllParams_2.sizePolicy().hasHeightForWidth())
        self.pushButton_Send_Setting_Controller_AllParams_2.setSizePolicy(sizePolicy)
        self.pushButton_Send_Setting_Controller_AllParams_2.setObjectName("pushButton_Send_Setting_Controller_AllParams_2")

        self.textEdit_Info_Controller = QtWidgets.QTextEdit(self.frame)
        self.textEdit_Info_Controller.setGeometry(QtCore.QRect(170, 6, 161, 101))
        self.textEdit_Info_Controller.setObjectName("textEdit_Info_Controller")

        self.tabWidget_General.addTab(self.tab_Setting, "")

        self.tab_Events = QtWidgets.QWidget()
        self.tab_Events.setObjectName("tab_Events")

        self.frame_2 = QtWidgets.QFrame(self.tab_Events)
        self.frame_2.setGeometry(QtCore.QRect(20, 10, 971, 721))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")

        self.tableView_Events = QtWidgets.QTableView(self.frame_2)
        self.tableView_Events.setGeometry(QtCore.QRect(10, 10, 941, 701))
        self.tableView_Events.setObjectName("tableView_Events")

        # --------------------- tab_Events
        self.tabWidget_General.addTab(self.tab_Events, "")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1125, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget_General.setCurrentIndex(0)

        self.load_last_setting()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # other propety
        self.flag_meas = False # флаг разрешения измерений кнопки старт

        self.Signals=Signals_general()
        self.init_signal()

        self.checkBox_A0.clicked.connect(self.clicked_checkBox_ADC_setting)
        self.checkBox_A1.clicked.connect(self.clicked_checkBox_ADC_setting)
        self.checkBox_A2.clicked.connect(self.clicked_checkBox_ADC_setting)
        self.checkBox_A3.clicked.connect(self.clicked_checkBox_ADC_setting)
        self.checkBox_A4.clicked.connect(self.clicked_checkBox_ADC_setting)
        self.checkBox_A5.clicked.connect(self.clicked_checkBox_ADC_setting)
        self.checkBox_ADC1015.clicked.connect(self.clicked_checkBox_ADC_setting)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate

        #MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        MainWindow.setWindowTitle("Sensors Monitor   ver. 0.0.0.1")
        self.label_Port.setText(_translate("MainWindow", "Порт"))
        self.pushButton_Open_Port.setText(_translate("MainWindow", "Open"))
        self.pushButton_Close_port.setText(_translate("MainWindow", "Close"))
        self.label_Show_Signals.setText(_translate("MainWindow", "Отобразить сигнал"))
        self.groupBox_Time_meas.setTitle(_translate("MainWindow", "Time Meas"))
        self.radioButton_Contitue_time.setText(_translate("MainWindow", "Непрерывно"))
        self.radioButton_Limit_Time.setText(_translate("MainWindow", "Фикс. врем."))
        self.pushButton_Start_Meas.setText(_translate("MainWindow", "Start"))
        self.pushButton_Stop_Meas.setText(_translate("MainWindow", "Stop"))
        self.label_Record_to_File.setText(_translate("MainWindow", "Запись в файл"))
        self.pushButton_Select_Dir_to_Save.setText(_translate("MainWindow", "Select dir"))
        self.label_Name_File_Save.setText(_translate("MainWindow", "File"))
        self.checkBox_Write_Save_Data.setText(_translate("MainWindow", "Запись"))
        self.tabWidget_General.setTabText(self.tabWidget_General.indexOf(self.tab_Main), _translate("MainWindow", "Main"))
        self.groupBox_Type_Controller.setTitle(_translate("MainWindow", "Controller"))
        self.groupBox_Setting_ADC.setTitle(_translate("MainWindow", "Setting ADC"))
        self.pushButton_Send_Setting_ADC.setText(_translate("MainWindow", "Send"))
        self.checkBox_A0.setText(_translate("MainWindow", "A0"))
        self.checkBox_A4.setText(_translate("MainWindow", "A4"))
        self.checkBox_A3.setText(_translate("MainWindow", "A3"))
        self.checkBox_A2.setText(_translate("MainWindow", "A2"))
        self.checkBox_A5.setText(_translate("MainWindow", "A5"))
        self.checkBox_ADC1015.setText(_translate("MainWindow", "ADC1015"))
        self.checkBox_A1.setText(_translate("MainWindow", "A1"))
        self.groupBox_Link_with_PC.setTitle(_translate("MainWindow", "Linking with an external device"))
        self.radioButton_Link_with_PC_USB.setText(_translate("MainWindow", "USB 2"))
        self.radioButton_Link_with_PC_WiFi.setText(_translate("MainWindow", "WiFi"))
        self.label_Link_with_PC_Speed.setText(_translate("MainWindow", "Speed"))
        self.radioButton_Link_with_PC_Bluetooth.setText(_translate("MainWindow", "Bluetooth"))
        self.groupBox_Data_Setting_Meas.setTitle(_translate("MainWindow", "Data Setting Meas"))
        self.checkBox_Data_Setting_Meas_smoth.setText(_translate("MainWindow", " Сглаживать CheckBox"))
        self.label_Data_Setting_Meas.setText(_translate("MainWindow", "Частота дискретизации, Гц"))
        self.groupBox_SafeMode.setTitle(_translate("MainWindow", "SafeMode"))
        self.pushButton_Send_SefeMode.setText(_translate("MainWindow", "Send"))
        self.radioButton_2.setText(_translate("MainWindow", "RadioButton"))
        self.radioButton_4.setText(_translate("MainWindow", "RadioButton"))
        self.radioButton.setText(_translate("MainWindow", "RadioButton"))
        self.radioButton_3.setText(_translate("MainWindow", "RadioButton"))
        self.pushButton_Send_Setting_Controller_AllParams.setText(_translate("MainWindow", "Send All Param"))
        self.pushButton_Send_Setting_Controller_AllParams_2.setText(_translate("MainWindow", "Get about Contrl"))
        self.tabWidget_General.setTabText(self.tabWidget_General.indexOf(self.tab_Setting), _translate("MainWindow", "Setting"))
        self.tabWidget_General.setTabText(self.tabWidget_General.indexOf(self.tab_Events), _translate("MainWindow", "Events"))

    def add_functions(self):
        #self.comboBox_ComPort.clicked.connect(self.comboBox_ComPort)
        self.comboBox_ComPort.popupAboutToBeShown.connect(self.clicked_comboBox_ComPort)
        self.pushButton_Open_Port.clicked.connect(self.clicked_pushButton_Open_Port)
        self.centralwidget.closeEvent()
        self.pushButton_Start_Meas.clicked.connect(self.clicked_pushButton_Start_Meas) # измерение идет пока self.flag_meas=True



    def clicked_checkBox_ADC_setting(self):
        obj=MainWindow.sender()  # https://pythonworld.ru/gui/pyqt5-eventssignals.html
                         # https://ru.stackoverflow.com/questions/1030872/%D0%9F%D1%80%D0%BE%D0%B1%D0%BB%D0%B5%D0%BC%D0%B0-%D1%81-sender-%D0%B2-pyqt5
        name_obj=obj.objectName()
        name_obj=name_obj[9:] # удаляем тип виджита из имени
        list_signals[name_obj] = obj.isChecked()

    def table_Show_Signals_cellChanged(self, row,col):
        #print(item.row())
        #a=item.row()
       # b = item.column()
        a=row
        b=col
        print(row)
    def load_last_setting(self):
        from pprint import pprint
        with open('settins_templates.yaml') as f:
            templates = yaml.safe_load(f)

        list1=templates['Type_Controllers']
        self.comboBox_Type_Controller.clear()
        self.comboBox_Type_Controller.addItems(list1)
        s=templates['Type_Controller_last'][0]
        self.comboBox_Type_Controller.setCurrentText(s)


        s=str(templates['Link_with_PC_Types_last'][0])
        if s=='USB':
            self.radioButton_Link_with_PC_USB.setChecked(True)
        elif s == 'Bluetooth':
            self.radioButton_Link_with_PC_Bluetooth.setChecked(True)
        elif s == 'WiFi':
            self.radioButton_Link_with_PC_WiFi.setChecked(True)

        self.lineEdit_Data_Setting_Meas_Freq.setText(str(templates['Meas_Freq_last'][0]))
        self.lineEdit_Speed.setText(str(templates['Link_with_PC_Speeds_last'][0]))
        for adc_name in (templates['Meas_ADC_last']):
            s = adc_name
            f=templates['Meas_ADC_last'][s]
            check_box_name="checkBox_"+adc_name
            check_box_widget=QCheckBox()
            check_box_widget = self.centralwidget.findChild(QCheckBox, check_box_name) # не работает ??
            check_box_widget.setChecked(f)
            # check_box_name='self.'+ check_box_name
            # check_box_widget=eval(check_box_name)
            # check_box_widget.setChecked(f)
        pprint(templates)



    def closeEvent_(self, event):  # событие закрытия главного окна

        if self.radioButton_Link_with_PC_USB.isChecked() == True:
            Link_with_PC_Types_last_val='USB'
        elif self.radioButton_Link_with_PC_Bluetooth.isChecked() == True:
            Link_with_PC_Types_last_val = 'Bluetooth'
        elif self.radioButton_Link_with_PC_WiFi.isChecked() == True:
            Link_with_PC_Types_last_val = 'WiFi'

        Edit_Data_Setting_Meas_Freq_val = self.lineEdit_Data_Setting_Meas_Freq.text()

        Type_Controller_last_val = self.comboBox_Type_Controller.currentText()

        Link_with_PC_Speeds_last_val = self.lineEdit_Speed.text()

        with open('settins_templates.yaml') as f:
            templates = yaml.safe_load(f)

        Meas_ADC_last= templates['Meas_ADC_last']  # https://russianblogs.com/article/37421047373/
        for name_ADC in list_signals:
            if list_signals[name_ADC] == True:
                #Meas_ADC_last.update(name_ADC, True)
                Meas_ADC_last['Meas_ADC_last'][name_ADC]=True
            else:
               # Meas_ADC_last.update(name_ADC, False)
                Meas_ADC_last['Meas_ADC_last'][name_ADC] = False

        to_yaml = {
            'Type_Controller_last': Type_Controller_last_val,
            'Link_with_PC_Speeds_last': Link_with_PC_Speeds_last_val,
            "Link_with_PC_Types_last": Link_with_PC_Types_last_val,
            'Meas_Freq_last': Edit_Data_Setting_Meas_Freq_val,
            'Meas_ADC_last': Meas_ADC_last
        }

        with open('settins_templates.yaml', 'w') as f:
            yaml.dump(to_yaml, f, default_flow_style=False)

        #with open('settins_templates.yaml') as f:
        #    print(f.read())


    def clicked_pushButton_Open_Port(self):
        serial.setPortName(self.comboBox_ComPort.currentText())
        serial.open(QIODevice.ReadWrite)

    def init_signal(self):
        # module class_signals

        # из файла смотрим настройки сигналов
        with open('settins_templates.yaml') as f:
            templates = yaml.safe_load(f)

       # получаем список сигналов из списка list_signals

        for name_ADC in list_signals:
            if list_signals[name_ADC] == True:
                print('f')




   # def table_Show_Signals_itemChanged(self):
   #     print('dd')


class Class_Tabl_Show_Signals(QTableWidget):
    #def __init__(self, QTableWidget):

    #    self.tabl_Show_Signals=self.Create_tabl_Show_Signals(object)

    def Create_tabl_Show_Signals(self, obj):
       # QTableWidget.__init__(self)#super(QTableWidget, self).__init__() #
        table_Show_Signals = QTableWidget(obj)  # Create a table  obj - родительский объект
        table_Show_Signals.setColumnCount(6)  # Set three columns
        table_Show_Signals.setRowCount(1)  # and one row
        table_Show_Signals.setHorizontalHeaderLabels(["Name", "Shw", "Num.Fig", "k", " Sh", "W"])  # Set the table headers

        # "Name" - имя сигнала - str
        # "Sh" - показать - 1, спрятать - 0
        # "Num.Fig" - номер фигуры (рисунка)
        # "k" - масштабный коэффициент - сигнал умножается на данное значение
        # "W" - в отдельном окне - 1; во внутреннем окне - 0 QMdiArea

        # for i in range(table_Show_Signals.rowCount()):
        #    table_Show_Signals.setRowHeight(i, 5)

        table_Show_Signals.setColumnWidth(0, 1)  # "Name"
        table_Show_Signals.setColumnWidth(1, 15) # "Shw, \
        table_Show_Signals.setColumnWidth(2, 5)  # "Num.Fig",
        table_Show_Signals.setColumnWidth(3, 5)  #  "k", \
        table_Show_Signals.setColumnWidth(4, 8)  # Shift - смещение
        table_Show_Signals.setColumnWidth(5, 4)  #"W"
        table_Show_Signals.setColumnWidth(6, 4)  #

        c=0
        for dict_key in list_signals.keys(): # имена сигналов     range(len(
            a=list_signals[dict_key]
            if a == True:
                if c!=0 :
                    table_Show_Signals.insertRow(c)
                table_Show_Signals.setRowHeight(c, 5)
                st=dict_key
                table_Show_Signals.setItem(c, 0, QTableWidgetItem(st)) # выводит имя сигнала в таблицу в 0 колонку

                check_box = self.create_checkbox()
                check_box.setObjectName('check_box_of_table_Show_Signals_Name_signal_Show_signal_'+dict_key) # Sh - показать/спрятать сигнал
                table_Show_Signals.setCellWidget(c, 1, check_box)

                table_Show_Signals.setItem(c, 2, QTableWidgetItem(str(c))) # Num.Fig номер фигуры (по умолчанию в отдельном окне
                table_Show_Signals.setItem(c, 3, QTableWidgetItem(str(1))) # k - коэффициент усиления ; 0 - нормировка на максимум
                table_Show_Signals.setItem(c, 4, QTableWidgetItem(str(0))) # Shift - смещение


                check_box2 = self.create_checkbox() # W - в отдельном окне
                check_box2.setObjectName('check_box_of_table_Show_Signals_Name_signal_Separate_wind_'+dict_key)
                table_Show_Signals.setCellWidget(c, 5, check_box2)
                c += 1
                #table_Show_Signals.itemChanged.connect(self.table_Show_Signals_itemChanged) # собітие изменение самой таблицы , а не значений
               # table_Show_Signals.cellChanged.connect(self.table_Show_Signals_cellChanged)

        # self.table_Show_Signals=table_Show_Signals

        self.table_Show_Signals= table_Show_Signals
        self.table_Show_Signals.cellChanged.connect(self.table_Show_Signals_cellChanged)
        return self.table_Show_Signals


    def create_checkbox(self):
        Widget = QtWidgets.QWidget()
        pCheckBox = QtWidgets.QCheckBox()
        pLayout = QtWidgets.QHBoxLayout(Widget)
        pLayout.addWidget(pCheckBox)
        pLayout.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter) # for PyQt5 :  QtCore.Qt.AlignCenter
        pLayout.setContentsMargins(0, 0, 0, 0)
        Widget.setLayout(pLayout)
        return Widget


    def table_Show_Signals_cellChanged(self, row,col):
        #print(item.row())
        #a=item.row()
       # b = item.column()
        a=row
        b=col
        print(row)



class CustomComboBox(QComboBox):
    popupAboutToBeShown = pyqtSignal()

    def __init__(self, parent = None):
        super(CustomComboBox,self).__init__(parent)

    #     Функция SPOPUP
    def showPopup(self):
        # Сначала опустошена оригинальная опция
        self.clear()
       # self.insertItem(0, «Пожалуйста, выберите серийный номер реле»)
        index = 1
        # Получить всю последовательную информацию для доступа, вставить в вариант Combobox
        portlist = self.get_port_list(self)
        if portlist is not None:
            for i in portlist:
                self.insertItem(index, i)
                index += 1
        QComboBox.showPopup(self)   #

    @staticmethod
    # Получить все номера последовательных портов
    def get_port_list(self):
        try:
            portList = []
            ports = QSerialPortInfo().availablePorts()
            self.clear()
            for port in ports:
                portList.append(port.portName())
                self.addItems(portList)

            # port_list = list(serial.tools.list_ports.comports())
            # for port in port_list:
            #     yield str(port)
        except Exception as e:
            logging.error("Получить все устройства последовательных портов для доступа! \ N сообщение об ошибке:"+str(e))


#
# class MyWin(QtWidgets.QWidget, Ui_MainWindow):
#     def __init__(self):
#         super().__init__()
#         self.setupUi(self)
#
#     def closeEvent(self, event):
#         reply = QtWidgets.QMessageBox.information(self, 'Выход', 'Вы точно хотите выйти?',
#                                                   QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
#                                                   QtWidgets.QMessageBox.No)
#         if reply == QtWidgets.QMessageBox.Yes:
#
#             if self.radioButton_Link_with_PC_USB.isChecked() == True:
#                 Link_with_PC_Types_last_val = 'USB'
#             elif self.radioButton_Link_with_PC_Bluetooth.isChecked() == True:
#                 Link_with_PC_Types_last_val = 'Bluetooth'
#             elif self.radioButton_Link_with_PC_WiFi.isChecked() == True:
#                 Link_with_PC_Types_last_val = 'WiFi'
#
#             Edit_Data_Setting_Meas_Freq_val = self.lineEdit_Data_Setting_Meas_Freq.text()
#
#             Type_Controller_last_val = self.comboBox_Type_Controller.currentText()
#
#             Link_with_PC_Speeds_last_val = self.lineEdit_Speed.text()
#
#             with open('settins_templates.yaml') as f:
#                 templates = yaml.safe_load(f)
#
#             Meas_ADC_last = templates['Meas_ADC_last']  # https://russianblogs.com/article/37421047373/
#             for name_ADC in list_signals:
#                 if list_signals[name_ADC] == True:
#                     # Meas_ADC_last.update(name_ADC, True)
#                     Meas_ADC_last['Meas_ADC_last'][name_ADC] = True
#                 else:
#                     # Meas_ADC_last.update(name_ADC, False)
#                     Meas_ADC_last['Meas_ADC_last'][name_ADC] = False
#
#             to_yaml = {
#                 'Type_Controller_last': Type_Controller_last_val,
#                 'Link_with_PC_Speeds_last': Link_with_PC_Speeds_last_val,
#                 "Link_with_PC_Types_last": Link_with_PC_Types_last_val,
#                 'Meas_Freq_last': Edit_Data_Setting_Meas_Freq_val,
#                 'Meas_ADC_last': Meas_ADC_last
#             }
#
#             with open('settins_templates.yaml', 'w') as f:
#                 yaml.dump(to_yaml, f, default_flow_style=False)
#
#             # with open('settins_templates.yaml') as f:
#             #    print(f.read())
#             event.accept()
#         else:
#             event.ignore()
        #----------------------------
class Base_struct():
    def __init__(self):
        self.Base_struct_unsigned_int = {
            "Base_struct": "Base_struct_unsigned_int",
            "name_tag_code": 0,
            "name_tag": "",
            "time": 0,
            "val": 0,
            "crc": 0
        }
        self.Base_struct_int = {
            "Base_struct": "Base_struct_int",
            "name_tag_code": 0,
            "name_tag": "",
            "time": 0,
            "val": 0,
            "crc": 0
        }
        self.Base_struct_float = {
            "Base_struct": "Base_struct_float",
            "name_tag_code": 0,
            "name_tag": "",
            "time": 0,
            "val": 0,
            "crc": 0
        }
    # Base_struct_string = {
    #     "Base_struct": "Base_struct_float",
    #     "name_tag_code": 0,
    #     "name_tag" : "",
    #     "time" : 0,
    #     "val": 0,
    #     "crc": 0
    # }


class Signals_general():
    def __init__(self):
        self.names_list = []
        self.type_struct = ""
        self.name_cod_list = []
        self.array_signals = []  # Signal_one() # type is Signal_one
        self.dt_mean = 1  # sec

    def create_signal(self, signal_property):
        if len(self.array_signals) == 0:
            self.array_signals = Signal_one()

        self.array_signals.append(signal_property)  # signal_property - class Signal_one
        self.names_list.append(signal_property.name)
        self.name_cod_list.append(signal_property.name_cod)

    def add_value_to_signal(self, signal):  # signal - Base_struct
        L = len(self.names_list)
        c = 0
        for name_cod in range(self.name_cod_list):

            if name_cod == signal.name_tag_cod:
                self.array_signals[c].time_arr.append(signal["time"])
                self.array_signals[c].y_arr.append(signal["val"])  # необходимо добавить калибровку

                break
            c += 1


class Signal_one():
    def __init__(self):
        self.name = ""
        self.name_cod = bytes([
                                  0])  # byte ! - порядковый номер сигнала, должен быть согласовон с ардуино.  https://www.delftstack.com/ru/howto/python/how-to-convert-int-to-bytes-in-python-2-and-python-3/
        self.time_arr = []
        self.y_arr = []
        self.y_filtr_arr = []
        self.calibrovka = 1  # калибровочные данные (необходимо сделать ссылку на функцию)

        self.time_unit = ""
        self.y_unit = ""

        self.windows_flag = False  # разрешает/запрещает рассчеты в окне
        self.windows_descret_count = 2048  # в отсчетах  интервал усреднения
        self.windows_float_counr = 0  # в отсчетах
        self.windows_descret_time = 2048  # по времени
        self.windows_float_time = 0  # по времени

        self.std_y_wind = []
        self.disp_y_wind = []

        self.windows_spectr_flag = False  # разрешает/запрещает рассчеты спектра Фурье в окне
        self.spectr_points = 1024
        self.windows_descret_spectr_Freq_of_y = []  # двухмерный массив х (i) - время ; y (j)- частоты
        self.windows_descret_spectr_Pow_of_y = []  # двухмерный массив х (i) - время ; y (j)- мощность

        self.conditions_comments = ""

#----------------------------


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    #ui.setupUi(MainWindow)
    ui.setupUi(MainWindow)

    #
    MainWindow.show()
    # ui=MyWin()
    # ui.show()
    sys.exit(app.exec_())
